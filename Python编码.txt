
Python2 字符串设计上的一些缺陷：
使用 ASCII 码作为默认编码方式，对中文处理很不友好。
把字符串的牵强地分为 unicode 和 str 两种类型，误导开发者

GBK 包括 GB2312的所有编码，有些字GB2312没有，需要用GBK来编码 

unicode可以称为抽象编码，也就是它只是一种内部表示，一般不能直接保存。
保存到磁盘上时，需要把它转换为对应的编码，如utf-8和utf-16。
		
	
编码转换  
	编码1转编码2的方法  可以先把1转为unicode，再转为2  
	编码1：GBK， GB2312, cp936
	编码2：utf-8， utf-16, ISO-8859-1
	
	
以这些编码纷纷使用了多字节来表示字符，如GBxxx、BIGxxx等等，他们的规则是，如果第一个字节是\x80以下，则仍然表示ASCII字符；而如果是\x80以上，则跟下一个字节一起（共两个字节）表示一个字符，然后跳过下一个字节，继续往下判断。


，GBK是第936页，也就是CP936。所以，也可以使用CP936表示GBK
	
	
python诞生要比unicode早很多

####python3 默认的编码为unicode，字符串前面不需要加u了
	decode --> unicode；变为str类型
	encode --> GBK、UTF8；变为bytes类型
	encode 编码   decode解码
	str.encode  
	bstr.decode  
	
	编码 
		把人类所使用的字符集转换为计算机可以理解的二进制码  
	解码：
		编码的逆过程
		
	decode是任何字符串具有的方法，将字符串转换成unicode格式，参数指示源字符串的编码格式。
	encode也是任何字符串具有的方法，将字符串转换成参数指定的格式。
	
	
	py3中，str就是unicode，所以需要和人交互的地方都要用str
	unicode是bytes的子集
	
	
	###总结各个编码的互相转换都要先转换成unicode然后通过unicode再转换成想要的编码
	##从上面可以看出gb2312 ，gbk，gb18030返回的结果都是一样的，那是应为这3个都是中国的编码，所以都是向下互相兼容的
	##中国的编码最先出来的是gb2312,然后是gb18030，最后是gbk，它们所支持的字符数也是随着顺序逐渐增多从最初的7000多到现在的近3万个
	
	
当一个文件以文本模式打开的时候，被读取的二进制存储数据（也就是存储的字节字符串）会自动被解码（依据显式提供的编码名称或平台默认的编码名称），并且将其返回为一个str。写入文件时，会接受一个str，并且将其传输到文件之前自动编码成字节字符串以供磁盘存储。	

当一个文件以二进制模式打开时，需要在open方法的模式字符串参数里添加一个b，此时读取的数据不会以任何方式解码，而是直接返回其原始内容，即一个bytes对象；写入文件时，接受一个bytes对象，并且将其传送到文件中且不进行修改。

在读取文本文件的时候，如果open函数没有声明他们如何编码，python3会因其所运行的系统而选取默认的编码方式，默认情况下，python3 期望文件使用 utf-8进行编码。但由于文件并不总是在同一个系统中被保存和打开，因此会带来乱码的风险，所以我们需要显式的指定编码

补充的说明一下，可以很简单的进行一个分类：处理图像文件、设备数据流等，可以使用bytes和二进制模式文件处理；而如果要处理的内容实质是文本的内容，例如程序输出、HTML、国际化文本或CSV或XML文件，则可能要使用str和文本模式文件


读取 有BOM的UTF-8编码文件 ，open方法传入参数： encoding = 'utf-8-sig'

py2编码转py3
	_ver = sys.version_info
	is_py2 = (_ver[0] == 2)
	is_py3 = (_ver[0] == 3)

	if is_py2:
		bytes = str
		str = unicode
	elif is_py3:
		str = str
		bytes = bytes

str是一种高层对象。bytes是一种底层的东西。这么理解就很容易明白了
如果你需要在高层处理，那么就全部使用str。
在与外部通信的时候，比如保存文件，socket通信，使用bytes	

命令行默认编码检测和设置
	可以用python自带的模块locale来检测命令行默认编码和设置命令行编码。
	import locale
	#get 
	locale.getdefaultlocale()
	#('zh_CN', 'cp936')
	#set
	locale.setlocale(...)
	
	

problem 
	ipython 如何撤回上一步
	
	
	
	
	
	
	